# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
# ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11.69, height = 16.53, dpi = "retina",limitsize = F)
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 7, height = 14, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
# ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11.69, height = 16.53, dpi = "retina",limitsize = F)
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11, height = 17, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
# ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11.69, height = 16.53, dpi = "retina",limitsize = F)
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11, height = 15, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
# ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 11.69, height = 16.53, dpi = "retina",limitsize = F)
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 9, height = 15, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 9.5, height = 15.5, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 9.2, height = 15.5, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_.pdf"), width = 9, height = 15, dpi = "retina",limitsize = F)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat, group = group), fill = fg, col=border_col,size=0.1) +
# geom_hline(yintercept = 0,linetype="dotted",color=border_col,size=0.5) + # add equator
# geom_sf(data=secondary_paths[1:3,],color=adjustcolor("red",0.7),size=0.3) + # add second paths
# geom_sf(data=secondary_paths,color=adjustcolor("white",0.3),size=0.3) + # add second paths
geom_sf(data=zp,color=path_col,size=path_size) + # add ziggy path
geom_point(data=city_df,aes(lon,lat),col=path_col,size=city_size) + # add cities
geom_point(data=city_secondary,aes(lon,lat),shape=21,fill=path_col,color=path_col,size=city_size) + # add secondary cities
coord_sf(xlim=c(-75,-81),ylim=c(-2,8)) + # zoom window
# theme_tufte(ticks=F) +
theme_nothing() +
theme(
panel.grid.major = element_line(colour = bg),
panel.ontop = F,   ## Note: this is to make the panel grid visible in this example
plot.background = element_rect(fill = bg))
# theme(plot.margin=unit(c(0,0,0,0),"mm")) +
# labs(x=NULL,y=NULL)
# geom_sf_label() # add label
# geom_sf_text() # add text
# coord_map("mercator",xlim=c(-75,-81),ylim=c(-2,8))
# geom_polygon(col = "blue", fill = NA) # get country borders back
# coord_fixed(1.5)
# dev.off()
ggsave(paste0("ziggy_",bg,"_",fg,"_",path_col,"_noequator.pdf"), width = 9, height = 15, dpi = "retina",limitsize = F)
908 + 192
908 + 192/ 1.6
(908 + 192 )/ 1.6
plot(newmap)
6~
\
!6
6!
factorial(6)
factorial(12)
factorial(2)
factorial(3)
factorial(10)
d <- map_data("worldHires", countries)
ggplot() +
geom_polygon(data=d,aes(x=long, y=lat
)
)
d
class(d)
install.packages("mapdeck")
require(mapdeck)
url <- url <- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'
flights <- read.csv(url)
head(flights)
str(flights)
with(flights,plot(airport1,cnt,pch=20))
with(flights,plot(cnt,pch=20))
with(flights,plot(density(cnt),pch=20))
with(flights,plot(density(cnt),density(airpor),pch=20))
with(flights,plot(density(cnt),density(airport),pch=20))
str(flights)
with(flights,plot(density(cnt),density(airport1),pch=20))
with(flights,plot(density(cnt)~density(airport1),pch=20))
with(flights,plot(density(airport1),pch=20))
str(flights)
with(flights,plot(density(start_lat)~density(end_lat),pch=20))
with(flights,plot(density(start_lat),density(end_lat),pch=20))
with(flights,plot(density(start_lat),density(end_lat),pch=20))
with(flights,plot(density(start_lat)
)
)
with(flights,plot(density(start_lat),density(end_lat),pch=20))
with(flights,plot(start_lat,end_lat,pch=20))
with(flights,plot(start_lat,start_lon,pch=20))
flights$info <- paste0("<b>",flights$airport1, " - ", flights$airport2, "</b>")
str(flights)
flights$info
mapkey
mapkey <- readLines("mb.txt")
mapkey
mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')))
p <- mapdeck(token = mapkey, style = mapdeck_style('dark'))
p
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
str(flights)
# plot ---------------------------------------------------------------------
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p
plot(p)
str(p)
# plot ---------------------------------------------------------------------
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p
cat(packages)
cat(as.list(packages))
print(as.list(packages))
print(paste(packages,sep="\n"))
cat(paste(packages,sep="\n"))
packages <- c("evaluate","animation","RColorBrewer","dplyr","ggmap","RgoogleMaps","sp","maptools","scales","rgdal","ggplot2","leaflet","jsonlite","readr","devtools","mapdata","ggsn","mapview","mapproj","ggthemes","reshape2","grid")
if (require(packages)) {
install.packages(packages,dependencies = T)
require(packages)
# install RgoogleMaps and OpenStreetMap separately, for some reason
install.packages("RgoogleMaps"); library(RgoogleMaps)
install.packages("OpenStreetMap"); library(OpenStreetMap)
install.packages("leaflet"); library(leaflet)
install.packages("googleway") ; library(googleway)
# install geojsonio from github and source
devtools::install_github("ropensci/geojsonio"); library(geojsonio)
}
ppp <- lapply(packages,require,character.only=T)
if(any(ppp==F)){cbind(packages,ppp);cat("\n\n\n ---> Check packages are loaded properly <--- \n\n\n")}
require(evaluate)
library(evaluate)
cat(paste(packages,sep="\n"))
library(evaluate)
install.packages("evaluate")
install.packages("evaluate")
library(evaluate)
cat(paste(packages,sep="\n"))
wd
setwd("/Users/malishev/Documents/Data/gggmap")
install.packages("formatR", repos = "http://cran.rstudio.com")
require(formatR)
list(packages)
# install packages --------------------------------------------------------
packages <- c("evaluate","animation","RColorBrewer","dplyr","ggmap","RgoogleMaps","sp","maptools","scales","rgdal","ggplot2","leaflet","jsonlite","readr","devtools","mapdata","ggsn","mapview","mapproj","ggthemes","reshape2","grid")
if (require(packages)) {
install.packages(packages,dependencies = T)
require(packages)
# install RgoogleMaps and OpenStreetMap separately, for some reason
install.packages("RgoogleMaps"); library(RgoogleMaps)
install.packages("OpenStreetMap"); library(OpenStreetMap)
install.packages("leaflet"); library(leaflet)
install.packages("googleway") ; library(googleway)
# install geojsonio from github and source
devtools::install_github("ropensci/geojsonio"); library(geojsonio)
}
ppp <- lapply(packages,require,character.only=T)
if(any(ppp==F)){cbind(packages,ppp);cat("\n\n\n ---> Check packages are loaded properly <--- \n\n\n")}
?add_pointcloud
??add_pointcloud
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_pointcloud(data = flights, lat=start_lat, lon=start_lon
) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
require(mapdeck)
url <- url <- 'https://raw.githubusercontent.com/plotly/datasets/master/2011_february_aa_flight_paths.csv'
flights <- read.csv(url)
flights <- read.csv(url)
str(flights)
flights$info <- paste0("<b>",flights$airport1, " - ", flights$airport2, "</b>")
flights$info <- paste0("<b>",flights$airport1, " - ", flights$airport2, "</b>")
mapkey <- readLines("mb.txt")
# save to html to view
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_pointcloud(data = flights, lat=start_lat, lon=start_lon
) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p <- mapdeck(token = mapkey, style = mapdeck_style('dark')) %>%
add_pointcloud(data = flights, lat="start_lat", lon="start_lon"
) %>%
add_arc(
data = flights
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "airport1"
, stroke_to = "airport2"
, tooltip = "info"
, layer_id = 'arclayer'
)
p
leaflet %>% require()
leaflet %>% require()
leaflet %>% require
"leaflet" %>% require()
require(leaflet)
1211.61 + 352.03
map <- get_map(location, zoom = zoom, source = source, maptype = maptype)
require(ggmap); require(viridis)
location <- "Atlanta" # enter location on globe or leave blank to get map from your own data points
map <- get_map(location, zoom = zoom, source = source, maptype = maptype)
loc <- "Melbourne" # enter location on globe
lon <- geocode(loc)[,1]; lat <- geocode(loc)[,2] # get lon and lat
# https://blog.dominodatalab.com/applied-spatial-data-science-with-r/
# cloud maps and stacking map layers to create your own
# https://rstudio.github.io/leaflet/basemaps.html
###########################################################################
######################################## leaflet ##########################
###########################################################################
# load data
site_names <- c("Kisumu","Lake Jipe","Kinango")
kisumu <- c(-0.0917,34.7680)
lake_jipe <- c(-3.6019,37.7557)
kinango <- c(-4.1393,39.3180)
latlon <- t(data.frame(kisumu,lake_jipe,kinango))
colnames(latlon) <- c("lat", "lng") # need to be named this
latlon
############################ creating maps ############################
# useful help pages
?addCircles
### default maps
require(leaflet)
map <- leaflet() # initiate the leaflet map object
map <- addTiles(map) # add the actual map tiles to the leaflet object
map <- addCircles(map,sample(35,20,replace=T),sample(35,20,replace=T)) # generate some random data around lat/lon 35
map
### custom map
# add custom base layers
names(providers) # types of base maps available
# some good custom layers
# 37-48, 97-103,
provider_type <- names(providers)[37]
provider_type2 <- "CartoDB.Positron"# "Stamen.Toner" # set the above input as the custom base
col_site <- "red" # colour of site marker
radius <- 5 # size of site marker
zoom <- 6 # zoom level
opac <- 1 # transparency of map elements
weight <- 2 # width of poly lines
fill_polygon <- TRUE # FALSE = just draw lines among points
map <- leaflet() # initiate the leaflet map object
# find good zoom level
bl <- NULL # bottom left
tl <- NULL # top left
tr <- NULL # top right
br <- NULL # bottom right
map_aerial <- fitBounds(map, bl, tl, tr, br)
# add the site locations
map <- addCircles(map,
lng = latlon[,"lng"],
lat = latlon[,"lat"],
radius = radius,
stroke = TRUE,
weight = weight,
opacity = opac,
color = col_site,
fillColor = col_site,
label=site_names,
popup=site_names,
data=latlon)
map <- addPolylines(map,
lng = latlon[,"lng"],
lat = latlon[,"lat"],
color = col_site,
fillColor = col_site,
fill = fill_polygon,
weight = weight
)
# add custom map bases
map <- addProviderTiles(map, provider_type,
options = providerTileOptions(opacity = opac) # add opacity to country lines
)
# plot
map
# add more map type layers on top of each other
# !!! need to re-initiate map to see changes because it just stacks maps on top of each other
map <- addProviderTiles(map, provider_type2)
map
# save to file
require(mapview)
webshot::install_phantomjs() # need to install for mapshot()
setwd("/Users/malishev/Documents/Data/gggmap/")
mapshot(map, file = "mapshot_test.pdf",
vwidth=600,vheight=900,
remove_controls = c("zoomControl", "layersControl", "homeButton", "scaleBar"))
# save as html widget
require(htmlwidgets)
saveWidget(map,"mapshot.html")
# to save to file
# generate plot
# expand to plot window
# right click > Open frame in new window
# Print icon > Save to PDF > High quality
# plot neighborhood_group vs price
ggplot(data = df) +
geom_point(mapping = aes(x = neighbourhood_group, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
url <- "http://data.insideairbnb.com/united-states/ny/new-york-city/2019-06-02/data/listings.csv.gz"
df_full <- read_csv(url) # reads in data
df <- df_full[df_full$id<1000000,] # subsets ~2k of the ~48k entries based on (arbitrary?) id
ggplot(data = df) +
geom_point(mapping = aes(x = neighbourhood_group, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
url <- "http://data.insideairbnb.com/united-states/ny/new-york-city/2019-06-02/visualisations/listings.csv"
df_full <-  read_csv(url)
df <- df_full[df_full$id<1000000,]
ggplot(data = df) +
geom_point(mapping = aes(x = neighbourhood_group, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
ggplot(data = df) +
geom_point(mapping = aes(x = minimum_nights, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
ggplot(data = df) +
geom_point(mapping = aes(x = availability_365, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
ggplot(data = df) +
geom_point(mapping = aes(x = longitude, y = price, color = neighbourhood_group), shape = 21, stroke = 1)
getwd()
city
city_df
city
?geom_sf
class(zp)
